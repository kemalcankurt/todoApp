name: Build, Test, and Validate Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dotnet-tests:
    name: Run .NET Tests and Generate Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore --configuration Release

      - name: Run tests with coverage
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --logger trx

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report
        run: reportgenerator -reports:**/TestResults/**/*.xml -targetdir:coverage -reporttypes:HtmlInline_AzurePipelines

      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

  integration-tests:
    name: Run Integration & Playwright Tests
    runs-on: ubuntu-latest
    needs: dotnet-tests # Runs only if .NET tests pass

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: 'Password1.'
          ACCEPT_EULA: 'Y'
        ports:
          - 1433:1433
        options: >-
          --health-cmd "echo > /dev/tcp/localhost/1433"
          --health-interval 10s
          --health-retries 10
          --health-start-period 20s

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose environment
        run: docker-compose up -d

      - name: Wait for services to become healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 30  # Ensure services are fully ready

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Playwright Dependencies
        working-directory: tests/playwright
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: tests/playwright
        run: npx playwright install --with-deps

      - name: Run Playwright Tests
        working-directory: tests/playwright
        run: npx playwright test --reporter=html,json,junit

      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report
          path: tests/playwright/test-results/html-report

      - name: Tear Down Docker Environment
        run: docker-compose down